package view;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.zip.InflaterInputStream;

public class TCPSingleton extends Thread{
	
	private static TCPSingleton unica;
	
	public static TCPSingleton getInstance() {
		if(unica == null) {
			unica = new TCPSingleton();
			unica.start();
		}
		return unica;
	}
	
	private TCPSingleton(){}
	
	private Socket servidor;
	private BufferedReader reader;
	private BufferedWriter writer;
	private onMessageListener observer;
	
	public void setObserver(onMessageListener observer) {
		this.observer = observer;
	}
	
	public void run() {
		try {
			System.out.println("Waiting client...");
			ServerSocket server = new ServerSocket(5000);
			servidor = server.accept();
			System.out.println("Successfully connected");
			
			InputStream is = servidor.getInputStream();
			reader = new BufferedReader(new InputStreamReader(is));
			
			OutputStream os = servidor.getOutputStream();
			writer = new BufferedWriter(new OutputStreamWriter(os));
			
			while(true) {
				String linea = reader.readLine();
				System.out.println(linea);
				observer.onMessage(linea);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void sendMessage(String msg) {
		new Thread(
				()->{
					try {
						writer.write(msg+"\n");
						writer.flush();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				).start();
	}
	
}
